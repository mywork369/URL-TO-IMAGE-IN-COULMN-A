// Function to convert URLs in Column A to images
function processColumnA_ConvertImageURLs() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const range = sheet.getRange('A2:A');  // Column A contains Image URLs
  const values = range.getValues();  // Get all values in column A

  values.forEach((row, index) => {
    let imageUrl = row[0];  // Get the URL value from the cell in column A

    // Check if the value is a string, and trim it only if it's a string
    if (typeof imageUrl === 'string') {
      imageUrl = imageUrl.trim();  // Trim whitespace from the URL
    } else {
      imageUrl = '';  // If it's not a string, treat it as an empty string
    }

    // Skip empty cells (no URL present)
    if (imageUrl === '') {
      return;  // Skip this iteration if the URL is empty
    }

    // Validate the URL format using a regular expression
    const isValidUrl = (url) => {
      const pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
        '((([a-z\\d]([a-z\\d-]*[a-z\\d])?)\\.)+([a-z]{2,}|[a-z\\d-]{2,}))'+ // domain name
        '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*'+ // path
        '(\\?[;&a-z\\d%_.~+=-]*)?'+ // query string
        '(\\#[-a-z\\d_]*)?$','i'); // fragment locator
      return !!pattern.test(url);  // Return true if the URL matches the pattern, false otherwise
    };

    // If the URL is valid, insert it as an image in column A
    if (isValidUrl(imageUrl)) {
      range.getCell(index + 1, 1).setFormula(`=IMAGE("${imageUrl}", 4, 150, 150)`); // Set image formula (4 = custom size, 150x150)
    } else {
      // If the URL is invalid, set a feedback message in the cell
      range.getCell(index + 1, 1).setValue('Invalid URL');  // Set "Invalid URL" in the cell if the URL is invalid
    }
  });
}
